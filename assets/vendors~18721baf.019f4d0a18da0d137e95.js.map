{"version":3,"file":"assets/vendors~18721baf.019f4d0a18da0d137e95.js","mappings":"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","sources":["webpack:///./node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }));\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","PopStateEventType","createBrowserHistory","options","getUrlBasedHistory","window","globalHistory","pathname","search","hash","location","createLocation","state","usr","to","createPath","invariant","value","message","Error","warning","cond","console","warn","e","getHistoryState","index","idx","current","parsePath","Math","random","toString","substr","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","getLocation","createHref","validateLocation","document","defaultView","v5Compat","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","base","origin","href","URL","replaceState","listen","fn","addEventListener","removeEventListener","encodeLocation","url","push","Push","historyState","pushState","error","DOMException","name","replace","Replace","go","n","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","siblings","slice","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","ErrorResponseImpl","constructor","status","statusText","data","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","init","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","dataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","pendingNavigationController","initialized","m","lazy","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","subscriber","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","size","k","set","getSavedScrollPosition","async","startNavigation","opts","abort","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","submission","AbortController","pendingActionData","pendingError","request","createClientSideRequest","signal","findNearestBoundary","actionOutput","interruptActiveLoads","getSubmittingNavigation","actionMatch","getTargetMatch","callLoaderOrAction","aborted","shortCircuited","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","getLoadingNavigation","Request","fetcherSubmission","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","fetcher","get","revalidatingFetcher","getLoadingFetcher","has","abortFetcher","controller","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","delete","redirect","findRedirect","fetcherKey","add","processLoaderData","deferredData","subscribe","done","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","getFetcher","_temp","revalidate","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","Promise","all","resolveDeferredResults","setFetcherError","deleteFetcher","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref2","currentLocation","nextLocation","entries","Array","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","cancel","handle","convertRouteMatchToUiMatch","y","initialize","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","userReplace","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","r","handleFetcherAction","resolveDeferredData","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","Symbol","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","body","isSubmissionNavigation","isValidMethod","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","acc","_ref3","String","parse","convertFormDataToSearchParams","convertSearchParamsToFormData","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","values","currentUrl","nextUrl","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","reject","abortPromise","race","context","requestContext","handlerError","catch","isResponse","headers","isStaticRequest","protocol","isSameBasename","isRouteRequest","response","contentType","statusCode","deferred","resolveData","isDeferredData","_result$init","_result$init2","Headers","processRouteLoaderData","foundError","loaderHeaders","newLoaderData","mergedLoaderData","reverse","find","_temp4","errorMessage","signals","isRevalidatingLoader","then","unwrap","unwrappedData","getAll","v","pathMatches"],"sourceRoot":""}